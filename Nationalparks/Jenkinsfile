// Jenkinsfile for NationalParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"
    echo "REPO: ${REPO}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `Nationalparks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    stage('Checkout Source') {
      git url: '$REPO'
    }


    // The following variables need to be defined at the top level
    // and not inside the scope of a stage - otherwise they would not
    // be accessible from other stages.
    // Extract version and other properties from the pom.xml
    def groupId    = getGroupIdFromPom("pom.xml")
    def artifactId = getArtifactIdFromPom("pom.xml")
    def version    = getVersionFromPom("pom.xml")
    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"
    echo "devTag = ${devTag}"
    echo "prodTag = ${prodTag}"

    dir('Nationalparks') {

        stage('Modifying maven_settings.xml') {
            sh "sed -i 's/%GUID%/${GUID}/g' ../nexus_settings.xml"
        }


        // Using Maven build the jar file
        // Do not run tests in this step
        stage('Build jar') {
            echo "Building version ${version}"

            sh "mvn -s ../nexus_settings.xml clean package -Dmaven.test.skip=true"
        }

        //not using parallel since the benefit is not much but it requires Declarative pipelines https://jenkins.io/doc/book/pipeline/syntax/ , which requires lots of syntax changes
      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"

        sh "mvn -s ../nexus_settings.xml test"
      }

      // Using Maven call SonarQube for Code Analysis
      stage('Code Analysis') {
        echo "Running Code Analysis"

        sh "mvn -s ../nexus_settings.xml sonar:sonar -Dsonar.host.url=http://sonarqube.${GUID}-sonarqube.svc.cluster.local:9000 -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }

      // Publish the built jar file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        sh "mvn -s ../nexus_settings.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        sh "oc start-build nationalparks-dev --follow --from-file=./target/nationalparks.jar -n ${GUID}-parks-dev"

        openshiftVerifyBuild bldCfg: 'nationalparks-dev', checkForTriggeredDeployments: 'false',
                             namespace: '${GUID}-parks-dev', verbose: 'false', waitTime: ''
        //just does some oc get builds into greps...
        //https://github.com/openshift/jenkins-plugin

        sh "oc tag nationalparks-dev:latest nationalparks-dev:${devTag} -n ${GUID}-parks-dev"
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        sh "oc set image dc/nationalparks-dev nationalparks-dev=docker-registry.default.svc:5000/${GUID}-parks-dev/nationalparks-dev:${devTag} -n ${GUID}-parks-dev"
        sh "oc rollout latest nationalparks-dev -n ${GUID}-parks-dev"

        openshiftVerifyDeployment depCfg: 'nationalparks-dev', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'nationalparks-dev', verbose: 'false'
      }

      // Run Integration Tests in the Development Environment.
      stage('Integration Tests') {
        echo "Running Integration Tests"

        //part of the liveness probe, but we'll repeat
        String healthz = sh(script: "curl nationalparks-dev.${GUID}-parks-dev.svc.cluster.local:8080/ws/healthz/", returnStdout:true).trim();
        if (!healthz.equals("OK")) {
            currentBuild.result = 'ABORTED'
            error('/ws/healthz/ return string was not correct. Was ${healthz}')
        }

        //the return string is actually hardcoded, doens't even need the DB => not much of an integration test...
        //populating the DB (/ws/data/load) makes /ws/data/all return the info, but there seems to be no way to clear the database => also that would not be much of an integration test...
        String info = sh(script: "curl nationalparks-dev.${GUID}-parks-dev.svc.cluster.local:8080/ws/info/", returnStdout:true).trim();
        String expectedInfo = "{\"id\":\"nationalparks\",\"displayName\":\"National Parks (Dev)\",\"center\":{\"latitude\":\"47.039304\",\"longitude\":\"14.505178\"},\"zoom\":4}"
        if (!info.equals(expectedInfo)) {
            currentBuild.result = 'ABORTED'
            error('/ws/info return string was not "${expectedInfo}". Was "${info}"')
        }

      }

      // Copy Image to Nexus Docker Registry
      stage('Copy Image to Nexus Docker Registry') {
        echo "Copy image to Nexus Docker Registry"


       sh "skopeo copy " +
       "--src-tls-verify=false " +
       "--dest-tls-verify=false " +
       "--src-creds openshift:\$(oc whoami -t) " +
       "--dest-creds admin:admin123 " +
       "docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/nationalparks-dev:${devTag} " +
       "docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/nationalparks-dev:${devTag}"

      sh "oc tag nationalparks-dev:${devTag} nationalparks-dev:${prodTag} -n ${GUID}-parks-dev"


      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      // Do not activate the new version yet.
      def destApp   = ""
      def activeApp = ""
        boolean greenIsActive=false
        boolean blueIsActive =false

      stage('Blue/Green Production Deployment') {
          //look at the active service

          //oc get svc existing_service returns 0. oc get svc NOT_existing_service returns 1
          greenIsActive = 0 == sh(returnStatus: true, script: "oc get svc nationalparks-green -n ${GUID}-parks-prod")
          echo "greenIsActive: ${greenIsActive}"
          blueIsActive = 0 == sh(returnStatus: true, script: "oc get svc nationalparks-blue -n ${GUID}-parks-prod")
          echo "blueIsActive: ${blueIsActive}"

          if (greenIsActive && blueIsActive) {
            currentBuild.result = 'ABORTED'
            error('Both green and blue services are present???')
          }
          else if (greenIsActive) {
            activeApp = "nationalparks-green"
            destApp = "nationalparks-blue"
          }
          else if (blueIsActive) {
            activeApp = "nationalparks-blue"
            destApp = "nationalparks-green"
          }
          else {
          //we have to start by deploying the blue. Homework instructions 3.4 "Make the Green service active initially to guarantee a Blue rollout upon the first pipeline run"
            activeApp = "none"
            destApp = "nationalparks-blue"
          }
          echo "Active Application:      " + activeApp
          echo "Destination Application: " + destApp

          // Update the Image on the Production Deployment Config
          sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/nationalparks-dev:${prodTag} -n ${GUID}-parks-prod"
          sh "oc rollout latest ${destApp} -n ${GUID}-parks-prod"

          openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-parks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
      }

      stage('Switch over to new Version') {
      //do it automatically
//          input "Switch Production?"

        echo "Switching Production application to ${destApp}."
        //see hint in ParksMap/readme.doc: we have to delete the 'old' service (if any) and create the new one

        if (greenIsActive) {
            sh "oc delete svc nationalparks-green -n ${GUID}-parks-prod"
        }
        if (blueIsActive) {
            sh "oc delete svc nationalparks-blue -n ${GUID}-parks-prod"
        }
        //we don't delete replication controller, ... because we want to keep the "old" application running, just not "active" (i.e. not found by the frontend parksmap)

        sh "oc expose dc ${destApp} --port=8080 -n ${GUID}-parks-prod"
        sh "oc label svc ${destApp} type=parksmap-backend -n ${GUID}-parks-prod"
        openshiftVerifyService namespace: '${GUID}-parks-prod', svcName: destApp, verbose: 'false'

      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
